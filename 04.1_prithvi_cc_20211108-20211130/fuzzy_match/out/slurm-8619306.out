Job ID: 8619306
Job User: jasonjia
Num Cores: 16

Python file to run: cc_fuzzy_match.py

Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 317, in load_workbook
    reader.read()
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 278, in read
    self.read_workbook()
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 150, in read_workbook
    self.parser.parse()
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/workbook.py", line 47, in parse
    src = self.archive.read(self.workbook_part_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1337, in read
    with self.open(name, "r", pwd) as fp:
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1393, in open
    raise BadZipFile("Truncated file header")
zipfile.BadZipFile: Truncated file header
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = small_dask["Cleaned_Name_No_Punctuations"].apply(lambda x: process.extractOne(x, match_choices, scorer = fuzz.ratio), meta = "str")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 132, in <module>
    
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 317, in load_workbook
    reader.read()
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 279, in read
    self.read_properties()
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 172, in read_properties
    src = fromstring(self.archive.read(ARC_CORE))
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1338, in read
    return fp.read()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 858, in read
    buf += self._read1(self.MAX_N)
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 962, in _read1
    self._update_crc(data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 890, in _update_crc
    raise BadZipFile("Bad CRC-32 for file %r" % self.name)
zipfile.BadZipFile: Bad CRC-32 for file 'docProps/core.xml'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 317, in load_workbook
    reader.read()
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 278, in read
    self.read_workbook()
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 150, in read_workbook
    self.parser.parse()
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/workbook.py", line 47, in parse
    src = self.archive.read(self.workbook_part_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1337, in read
    with self.open(name, "r", pwd) as fp:
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1393, in open
    raise BadZipFile("Truncated file header")
zipfile.BadZipFile: Truncated file header
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 317, in load_workbook
    reader.read()
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 279, in read
    self.read_properties()
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 172, in read_properties
    src = fromstring(self.archive.read(ARC_CORE))
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1338, in read
    return fp.read()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 858, in read
    buf += self._read1(self.MAX_N)
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 962, in _read1
    self._update_crc(data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 890, in _update_crc
    raise BadZipFile("Bad CRC-32 for file %r" % self.name)
zipfile.BadZipFile: Bad CRC-32 for file 'docProps/core.xml'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 317, in load_workbook
    reader.read()
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 279, in read
    self.read_properties()
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 172, in read_properties
    src = fromstring(self.archive.read(ARC_CORE))
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1338, in read
    return fp.read()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 858, in read
    buf += self._read1(self.MAX_N)
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 962, in _read1
    self._update_crc(data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 890, in _update_crc
    raise BadZipFile("Bad CRC-32 for file %r" % self.name)
zipfile.BadZipFile: Bad CRC-32 for file 'docProps/core.xml'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 317, in load_workbook
    reader.read()
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 278, in read
    self.read_workbook()
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 150, in read_workbook
    self.parser.parse()
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/workbook.py", line 47, in parse
    src = self.archive.read(self.workbook_part_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1337, in read
    with self.open(name, "r", pwd) as fp:
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1396, in open
    raise BadZipFile("Bad magic number for file header")
zipfile.BadZipFile: Bad magic number for file header
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 316, in load_workbook
    data_only, keep_links)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 124, in __init__
    self.archive = _validate_archive(fn)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 96, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 166, in open_workbook
    file_format = inspect_format(filename, file_contents)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 67, in inspect_format
    zf = zipfile.ZipFile(timemachine.BYTES_IO(content) if content else path)
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 166, in open_workbook
    file_format = inspect_format(filename, file_contents)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 67, in inspect_format
    zf = zipfile.ZipFile(timemachine.BYTES_IO(content) if content else path)
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 182, in open_workbook
    ignore_workbook_corruption=ignore_workbook_corruption,
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/book.py", line 75, in open_workbook_xls
    ignore_workbook_corruption=ignore_workbook_corruption
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/book.py", line 621, in biff2_8_load
    raise XLRDError("File size is 0 bytes")
xlrd.biffh.XLRDError: File size is 0 bytes
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 182, in open_workbook
    ignore_workbook_corruption=ignore_workbook_corruption,
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/book.py", line 75, in open_workbook_xls
    ignore_workbook_corruption=ignore_workbook_corruption
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/book.py", line 621, in biff2_8_load
    raise XLRDError("File size is 0 bytes")
xlrd.biffh.XLRDError: File size is 0 bytes
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 166, in open_workbook
    file_format = inspect_format(filename, file_contents)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 67, in inspect_format
    zf = zipfile.ZipFile(timemachine.BYTES_IO(content) if content else path)
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1131, in __init__
    self._RealGetContents()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1198, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl")#.drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 236, in _get_code_from_file
    code = compile(f.read(), fname, 'exec')
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 371
    '''
      ^
SyntaxError: EOF while scanning triple-quoted string literal
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 22, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py", line 37, in load_workbook
    return open_workbook(filepath_or_buffer)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/xlrd/__init__.py", line 170, in open_workbook
    raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')
xlrd.biffh.XLRDError: Excel xlsx file; not supported
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 131, in <module>
    match_choices = compustat_df["companyname_No_Punctuations"]
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 105, in <module>
    df = pd.read_excel("/project/kh_mercury_1/conference_call/output/04_keyword_identification/04.4_groups_keyword_test1/full_conf_calls_compustat_match.xlsx", engine = "openpyxl").drop("Unnamed: 0", axis = 1)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/util/_decorators.py", line 296, in wrapper
    return func(*args, **kwargs)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 304, in read_excel
    io = ExcelFile(io, engine=engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 867, in __init__
    self._reader = self._engines[engine](self._io)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 480, in __init__
    super().__init__(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_base.py", line 353, in __init__
    self.book = self.load_workbook(filepath_or_buffer)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/excel/_openpyxl.py", line 492, in load_workbook
    filepath_or_buffer, read_only=True, data_only=True, keep_links=False
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 317, in load_workbook
    reader.read()
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 279, in read
    self.read_properties()
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/openpyxl/reader/excel.py", line 172, in read_properties
    src = fromstring(self.archive.read(ARC_CORE))
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 1338, in read
    return fp.read()
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 858, in read
    buf += self._read1(self.MAX_N)
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 962, in _read1
    self._update_crc(data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/zipfile.py", line 890, in _update_crc
    raise BadZipFile("Bad CRC-32 for file %r" % self.name)
zipfile.BadZipFile: Bad CRC-32 for file 'docProps/core.xml'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py", line 133, in <module>
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 261, in run_path
    code, fname = _get_code_from_file(run_name, path_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 231, in _get_code_from_file
    with open(fname, "rb") as f:
FileNotFoundError: [Errno 2] No such file or directory: '/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match.py'
Traceback (most recent call last):
  File "cc_fuzzy_match.py", line 150, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/parsers.py", line 688, in read_csv
    return _read(filepath_or_buffer, kwds)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/parsers.py", line 454, in _read
    parser = TextFileReader(fp_or_buf, **kwds)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/parsers.py", line 948, in __init__
    self._make_engine(self.engine)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/parsers.py", line 1180, in _make_engine
    self._engine = CParserWrapper(self.f, **self.options)
  File "/apps/python/3.6/3.6.12/lib/python3.6/site-packages/pandas/io/parsers.py", line 2010, in __init__
    self._reader = parsers.TextReader(src, **kwds)
  File "pandas/_libs/parsers.pyx", line 382, in pandas._libs.parsers.TextReader.__cinit__
  File "pandas/_libs/parsers.pyx", line 674, in pandas._libs.parsers.TextReader._setup_parser_source
FileNotFoundError: [Errno 2] No such file or directory: 'ciqcountrygeo.csv'
srun: error: mcn09: task 0: Exited with exit code 1
cc_fuzzy_match.py: done!

    MaxRSS    Elapsed     ReqMem  Timelimit 
---------- ---------- ---------- ---------- 
             00:41:20       16Gc 1-20:00:00 
             00:41:20       16Gc            
             00:41:20       16Gc            
156537088K   00:41:20       16Gc            
