Job ID: 8619458
Job User: jasonjia
Num Cores: 16

Python file to run: cc_fuzzy_match_part2.py

Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    results = results.compute(scheduler = "processes")
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 105, in spawn_main
    exitcode = _main(fd)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 114, in _main
    prepare(preparation_data)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 225, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 277, in _fixup_main_from_path
    run_name="__mp_main__")
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/project/kh_mercury_1/conference_call/code/03.5_prithvi_cc_20211108-20211130/fuzzy_match/cc_fuzzy_match_part2.py", line 155, in <module>
    
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 283, in compute
    (result,) = compute(self, traverse=False, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/base.py", line 565, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/project/kh_mercury_1/conference_call/code/env/lib/python3.6/site-packages/dask/multiprocessing.py", line 197, in get
    pool = context.Pool(num_workers, initializer=initialize_worker_process)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 119, in Pool
    context=self.get_context())
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 174, in __init__
    self._repopulate_pool()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/pool.py", line 239, in _repopulate_pool
    w.start()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/process.py", line 105, in start
    self._popen = self._Popen(self)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/context.py", line 284, in _Popen
    return Popen(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 32, in __init__
    super().__init__(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_fork.py", line 19, in __init__
    self._launch(process_obj)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/popen_spawn_posix.py", line 42, in _launch
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 143, in get_preparation_data
    _check_not_importing_main()
  File "/apps/python/3.6/3.6.12/lib/python3.6/multiprocessing/spawn.py", line 136, in _check_not_importing_main
    is not going to be frozen to produce an executable.''')
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
srun: Job step aborted: Waiting up to 32 seconds for job step to finish.
slurmstepd: error: *** JOB 8619458 ON mcn34 CANCELLED AT 2021-12-15T21:06:42 ***
slurmstepd: error: *** STEP 8619458.0 ON mcn34 CANCELLED AT 2021-12-15T21:06:42 ***
